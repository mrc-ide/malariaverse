[
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let’s dive right in!\n\n\n\nFirstly you’ll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(\"ggplot2\")\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Set a seed for reproducible stochastic outputs\nset.seed(12345)\n\n\n\n\n\nTo begin, we’ll run a basic malariasimulation model simulation. This initial run will be generic — meaning it’s not yet customised to represent a specific region, population or transmission setting. We’ll also skip any interventions for now, so we’re simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031406, 0.031406, 0.030788, 0.030788…\n$ EIR_gamb              &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ FOIM_gamb             &lt;dbl&gt; 0.01308150, 0.01308150, 0.01308150, 0.01308150, …\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,…\n$ n_bitten              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ S_count               &lt;dbl&gt; 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, …\n$ A_count               &lt;dbl&gt; 44, 44, 44, 43, 43, 43, 43, 44, 44, 44, 44, 44, …\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ U_count               &lt;dbl&gt; 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 13, 13, …\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ica_mean              &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ id_mean               &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ ib_mean               &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.00000000, …\n$ iva_mean              &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, …\n$ n_age_730_3650        &lt;dbl&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, …\n$ E_gamb_count          &lt;dbl&gt; 39147.67, 39142.56, 39133.52, 39129.46, 39127.77…\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.333, 1139.286, 1139.390, 1139.279…\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7485, 169.7476, 169.7363, 169.7432…\n$ Sm_gamb_count         &lt;dbl&gt; 987.8232, 977.2909, 968.1788, 960.2969, 953.4757…\n$ Pm_gamb_count         &lt;dbl&gt; 12.17683, 22.70920, 31.81918, 39.69884, 46.51432…\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0001, 999.9980, 999.9958, 999.99…\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what’s going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Baseline\")\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,…\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.5…\n$ run                &lt;chr&gt; \"Baseline\", \"Baseline\", \"Baseline\", \"Baseline\", \"Ba…\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the “Proportion of a specified population with malaria infection at one time”. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#31035f\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the “number of infective bites received per person in a given unit of time”, in this case per year. Let’s see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Run a new simulation\noutput2 &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output2 &lt;- get_prevalence(\n  x = output2,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Modified EIR\")\n\n# Combined outputs from both simulations for plotting\nplot_data &lt;- bind_rows(\n  processed_output,\n  processed_output2\n)\n\nggplot(\n  data = plot_data,\n  aes(x = time, y = lm_prevalence_2_10, col = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = c(\"#31035f\", \"#d32fbd\"), name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet’s revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the “administration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals”. They aren’t used that frequently in practice, but they’re a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA\")\n\n# Plot some results\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_vline(xintercept = 3, linetype = 2, colour = \"grey\") +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#31035f\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nCongratulations 🎉, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we’ve seen, the impact of our MDA doesn’t last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let’s specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),  # Each round is distributed to 50% of the population.\n  retention = 3 * 365, # Nets are kept on average 5 years\n  dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1), # Matrix of death probabilities for each mosquito species over time\n  rn = matrix(c(0.56, 0.56), nrow = 2, ncol = 1), # Matrix of repelling probabilities for each mosquito species over time\n  rnm = matrix(c(0.24, 0.24), nrow = 2, ncol = 1), # Matrix of minimum repelling probabilities for each mosquito species over time\n  gamman = rep(2.64 * 365, 2) # Vector of bed net half-lives for each distribution timestep\n)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA + Bednets\")\n\n# Plot some results\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_vline(xintercept = 3, linetype = 2, colour = \"grey\") +\n  geom_vline(xintercept = c(1, 4), linetype = 2, colour = \"grey\") +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#2cc3cc\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you’ve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial.html#malariaverse-tutorial-part-1",
    "href": "tutorial.html#malariaverse-tutorial-part-1",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let’s dive right in!\n\n\n\nFirstly you’ll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(\"ggplot2\")\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Set a seed for reproducible stochastic outputs\nset.seed(12345)\n\n\n\n\n\nTo begin, we’ll run a basic malariasimulation model simulation. This initial run will be generic — meaning it’s not yet customised to represent a specific region, population or transmission setting. We’ll also skip any interventions for now, so we’re simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031406, 0.031406, 0.030788, 0.030788…\n$ EIR_gamb              &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ FOIM_gamb             &lt;dbl&gt; 0.01308150, 0.01308150, 0.01308150, 0.01308150, …\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,…\n$ n_bitten              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ S_count               &lt;dbl&gt; 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, …\n$ A_count               &lt;dbl&gt; 44, 44, 44, 43, 43, 43, 43, 44, 44, 44, 44, 44, …\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ U_count               &lt;dbl&gt; 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 13, 13, …\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ica_mean              &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ id_mean               &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ ib_mean               &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.00000000, …\n$ iva_mean              &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, …\n$ n_age_730_3650        &lt;dbl&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, …\n$ E_gamb_count          &lt;dbl&gt; 39147.67, 39142.56, 39133.52, 39129.46, 39127.77…\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.333, 1139.286, 1139.390, 1139.279…\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7485, 169.7476, 169.7363, 169.7432…\n$ Sm_gamb_count         &lt;dbl&gt; 987.8232, 977.2909, 968.1788, 960.2969, 953.4757…\n$ Pm_gamb_count         &lt;dbl&gt; 12.17683, 22.70920, 31.81918, 39.69884, 46.51432…\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0001, 999.9980, 999.9958, 999.99…\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what’s going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Baseline\")\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,…\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.5…\n$ run                &lt;chr&gt; \"Baseline\", \"Baseline\", \"Baseline\", \"Baseline\", \"Ba…\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the “Proportion of a specified population with malaria infection at one time”. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#31035f\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the “number of infective bites received per person in a given unit of time”, in this case per year. Let’s see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Run a new simulation\noutput2 &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output2 &lt;- get_prevalence(\n  x = output2,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Modified EIR\")\n\n# Combined outputs from both simulations for plotting\nplot_data &lt;- bind_rows(\n  processed_output,\n  processed_output2\n)\n\nggplot(\n  data = plot_data,\n  aes(x = time, y = lm_prevalence_2_10, col = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = c(\"#31035f\", \"#d32fbd\"), name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet’s revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the “administration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals”. They aren’t used that frequently in practice, but they’re a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA\")\n\n# Plot some results\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_vline(xintercept = 3, linetype = 2, colour = \"grey\") +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#31035f\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nCongratulations 🎉, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we’ve seen, the impact of our MDA doesn’t last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let’s specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),  # Each round is distributed to 50% of the population.\n  retention = 3 * 365, # Nets are kept on average 5 years\n  dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1), # Matrix of death probabilities for each mosquito species over time\n  rn = matrix(c(0.56, 0.56), nrow = 2, ncol = 1), # Matrix of repelling probabilities for each mosquito species over time\n  rnm = matrix(c(0.24, 0.24), nrow = 2, ncol = 1), # Matrix of minimum repelling probabilities for each mosquito species over time\n  gamman = rep(2.64 * 365, 2) # Vector of bed net half-lives for each distribution timestep\n)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA + Bednets\")\n\n# Plot some results\nggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_vline(xintercept = 3, linetype = 2, colour = \"grey\") +\n  geom_vline(xintercept = c(1, 4), linetype = 2, colour = \"grey\") +\n  geom_line() +\n  scale_colour_manual(\n    values = \"#2cc3cc\", name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you’ve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial.html#part-2---context-matters",
    "href": "tutorial.html#part-2---context-matters",
    "title": "malariaverse",
    "section": "Part 2 - Context Matters!",
    "text": "Part 2 - Context Matters!\nIn the next part of this tutorial, (part 2)[URL], we’ll be considering other important factors in additional to interventions that can impact malaria transmission. We’ll be learning how to capture differences in seasonality, mosquitoes, human demography and more!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "malariaverse",
    "section": "",
    "text": "The malariaverse is a constellation of R packages to support the use of malariasimulation individual-based malaria transmission model for place specific modelling, for example modelling a specific region or country.\nThe process often involves:\n\nCollecting and processing data that are specific to the place.\nUsing these data to parameterise malariasimulation.\nProcessing raw model outputs.\nOptimisation.\n\nEach package targets a specific challenge of this broader process. Current packages in the malariaverse are shown below. Clicking on the package logo will take you to the package site, where you’ll find much more detailed information about what the package does and how to use it.\n\n\n\n\n\n\n\n\n\nForesite - Country and subnational site information\n \n\n\n\n\n\n\n\n\nUmbrella - fitting seasonality parameters from rainfall data\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetz - Managing net metrics and distributions\n  \n\n\n\n\n\n\n\n\npeeps - population demography\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite - convert site files to malariasimulation parameters\n  \n\n\n\n\n\n\n\n\nCali - calibrating model transmission\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscene - future scenario builder\n  \n\n\n\n\n\n\n\n\npostie - Post-processing of malariasimulation outputs\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nom - Intervention stratification optimisation with complex budgets\n  \n\n\n\n\n\n\n\n\nTreasure - a repository for costing data"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "malariaverse",
    "section": "",
    "text": "The model\nFor more information about the transmission model please visit the malariasimulation homepage.\n\n\nIssues/Bugs\nTo report an issue or a bug, or request a new feature please use the issues tab on the relevant package’s github page.\n\n\nContributions\nWant to contribute? Great! Please either file a PR on the relevant package’s github page or reach out to discuss options."
  },
  {
    "objectID": "advanced_tutorial.html",
    "href": "advanced_tutorial.html",
    "title": "malariaverse",
    "section": "",
    "text": "The model\nFor more information about the transmission model please visit the malariasimulation homepage.\n\n\nCalibrating baseline transmission\n\n\nBed net usage and model-distribution"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "A day-long introduction to the malariaverse workshop"
  }
]