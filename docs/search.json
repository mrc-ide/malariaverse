[
  {
    "objectID": "tutorial2.html",
    "href": "tutorial2.html",
    "title": "malariaverse",
    "section": "",
    "text": "# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")"
  },
  {
    "objectID": "tutorial2.html#malariaverse-tutorial-part-2",
    "href": "tutorial2.html#malariaverse-tutorial-part-2",
    "title": "malariaverse",
    "section": "Malariaverse Tutorial: Part 2",
    "text": "Malariaverse Tutorial: Part 2\nIn part 2 we will explore how to capture other important elements that influence malaria transmission besides the baseline transmission and interventions.\nLet‚Äôs go!"
  },
  {
    "objectID": "tutorial2.html#what-infleunces-malaria-transmission",
    "href": "tutorial2.html#what-infleunces-malaria-transmission",
    "title": "malariaverse",
    "section": "What infleunces malaria transmission",
    "text": "What infleunces malaria transmission\nBefore we dive straight into malariasimulation code, it‚Äôs helpful for us to consider what other aspects of the environment, human population or mosquito population might be important to capture in our modelling.\n\nüåß The environment\nThe key way in which the environment impacts transmission in malariasimulation is via rainfall, which drives the availability of mosquito breeding site and there for the number of mosquitoes that can transmit malaria.\n\n\nThe human population\nWe can consider two aspects of the human population as important in different ways\n1. The modelled population size: We rarely use actual population sizes when modelling malaria in a specific region or country as it would make the model run too slowly! Instead we aim to set the modelled population size high enough such that we minimise very influential stochastic behaviour (e.g.¬†elimination of malaria by chance), whilst keeping model run-time reasonable. There is no single ‚Äúcorrect‚Äù model population size and often some testing with different population sizes in the most helpful approach. Some elements you want to consider might be: * The level of transmission. At low transmission stochasticity might be more influential and you may therefore want to increase you modelled population size. * The research question. Do you want to capture the impact of stochastic effects with smaller modelled population sizes, or minimise them? * The study population. Remember, if your population of interest is a subset of the total population you may want to increase the modelled poplation size so that the trends in the target population are clear.\n2. The population demography: We know that there are strong age-related patterns in malaria incidence, severe disease and death. Therefore it is important to accurately capture the age-structure of your target population. We want to ensure the modelled population has the right proportion of infants, children and adults.\n\n\nü¶ü The mosquito population:\nThe mosquito population is, not surprisingly, very impactful on modelled malaria transmission. We should not only think about how many mosquitoes, but also what species of mosquito. Different species may behave very differently, meaning that their ability to transmit malaria, or our ability to control them could also look very different from place to place."
  },
  {
    "objectID": "tutorial2.html#capturing-these-influences-in-malariasimulation",
    "href": "tutorial2.html#capturing-these-influences-in-malariasimulation",
    "title": "malariaverse",
    "section": "Capturing these influences in malariasimulation",
    "text": "Capturing these influences in malariasimulation\n\nModelling seasonality in rainfall\nWe can model a setting where malaria transmission is seasonal, varying throughout the year. The easiest way of doing this is by providing some ‚Äúseasonality parameters‚Äù, these have been fitted to rainfall data to capture how rainfall varies across the year\n\nparameters &lt;- get_parameters()\n\n# Set up for model seasonality\nparameters$model_seasonality &lt;- TRUE\n# Define the seasonality parameters: h0, h and g\nparameters$h &lt;- c(1, -0.5, 0.5)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Seasonal\")\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = c(\"#31035f\", \"orange\", \"blue\", \"green\"), name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\nTo find out more about how we estimate the seasonality parameters, have a look at the documentation for the umbrella R package"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "malariaverse",
    "section": "",
    "text": "The malariaverse is a constellation of R packages to support the use of malariasimulation individual-based malaria transmission model for place specific modelling, for example modelling a specific region or country.\nThe process often involves:\n\nCollecting and processing data that are specific to the place.\nUsing these data to parameterise malariasimulation.\nProcessing raw model outputs.\nOptimisation.\n\nEach package targets a specific challenge of this broader process. Current packages in the malariaverse are shown below. Clicking on the package logo will take you to the package site, where you‚Äôll find much more detailed information about what the package does and how to use it.\n\n\n\n  \n\n\n\n\n\n\n\numbrella - fitting seasonality parameters from rainfall data\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnetz - managing net metrics and distributions\n  \n\n\n\n\n\n\n\n\npeeps - population demography\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite - country and sub-national site information and conversion to malariasimulation parameters\n  \n\n\n\n\n\n\n\n\ncali - calibrating model transmission\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscene - future scenario builder\n  \n\n\n\n\n\n\n\n\npostie - post-processing of malariasimulation outputs\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nom - intervention stratification optimisation with complex budgets\n  \n\n\n\n\n\n\n\n\ntreasure - a repository for costing data"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "malariaverse",
    "section": "",
    "text": "The model\nFor more information about the transmission model please visit the malariasimulation homepage.\nmalariasimulation is built using the individual package.\n\n\nIssues/Bugs\nTo report an issue or a bug, or request a new feature please use the issues tab on the relevant package‚Äôs github page.\n\n\nContributions\nWant to contribute? Great! Please either file a PR on the relevant package‚Äôs github page or reach out to discuss options."
  },
  {
    "objectID": "tutorial1.html",
    "href": "tutorial1.html",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let‚Äôs dive right in!\n\n\n\nFirstly you‚Äôll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\n\n\n\n\nTo begin, we‚Äôll run a basic malariasimulation model simulation. This initial run will be generic ‚Äî meaning it‚Äôs not yet customised to represent a specific region, population or transmission setting. We‚Äôll also skip any interventions for now, so we‚Äôre simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1‚Ä¶\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031344, 0.031282, 0.031282, 0.031282‚Ä¶\n$ EIR_gamb              &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.00‚Ä¶\n$ FOIM_gamb             &lt;dbl&gt; 0.008341207, 0.008341207, 0.008341207, 0.0083412‚Ä¶\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,‚Ä¶\n$ n_bitten              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ S_count               &lt;dbl&gt; 42, 43, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, ‚Ä¶\n$ A_count               &lt;dbl&gt; 44, 44, 44, 44, 44, 44, 43, 43, 43, 42, 41, 41, ‚Ä¶\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ U_count               &lt;dbl&gt; 13, 12, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, ‚Ä¶\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ ica_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ id_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ ib_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ iva_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ‚Ä¶\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ‚Ä¶\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, ‚Ä¶\n$ n_age_730_3650        &lt;dbl&gt; 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, ‚Ä¶\n$ E_gamb_count          &lt;dbl&gt; 39150.44, 39150.44, 39150.44, 39134.20, 39127.53‚Ä¶\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.318, 1139.318, 1139.271, 1139.251‚Ä¶\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7520, 169.7520, 169.7503, 169.7466‚Ä¶\n$ Sm_gamb_count         &lt;dbl&gt; 992.2177, 985.4543, 979.5766, 974.4677, 970.0251‚Ä¶\n$ Pm_gamb_count         &lt;dbl&gt; 7.782346, 14.545684, 20.423442, 25.531575, 29.97‚Ä¶\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000‚Ä¶\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0000, 1000.0000, 999.9992, 999.9‚Ä¶\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what‚Äôs going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Baseline\")\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, ‚Ä¶\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ‚Ä¶\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,‚Ä¶\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.3513514, 0.3513514, 0.3513514, 0.3513514, 0.35135‚Ä¶\n$ run                &lt;chr&gt; \"Baseline\", \"Baseline\", \"Baseline\", \"Baseline\", \"Ba‚Ä¶\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the ‚ÄúProportion of a specified population with malaria infection at one time‚Äù. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = c(\"#31035f\", \"orange\", \"blue\", \"green\"), name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the ‚Äúnumber of infective bites received per person in a given unit of time‚Äù, in this case per year. Let‚Äôs see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Modified EIR\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet‚Äôs revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the ‚Äúadministration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals‚Äù. They aren‚Äôt used that frequently in practice, but they‚Äôre a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nCongratulations üéâ, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we‚Äôve seen, the impact of our MDA doesn‚Äôt last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let‚Äôs specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\n# Modify the parameter list to add 2 bed net mass distributions\n## Distributions will be at the start of year 2 and 5\n## Each distribution will provide new nets to 80% of the population\n## Individuals will retain their bed net for, on average, 3 years\n## dn0, rn, rnm and gamman determine how the net kill and repels a mosquito species\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),\n  retention = 3 * 365,\n  dn0 = matrix(c(0.533, 0.533)),\n  rn = matrix(c(0.56, 0.56)),\n  rnm = matrix(c(0.24, 0.24)),\n  gamman = c(2.64 * 365, 2.64 * 365)\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA + Bednets\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you‚Äôve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial1.html#malariaverse-tutorial-part-1",
    "href": "tutorial1.html#malariaverse-tutorial-part-1",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let‚Äôs dive right in!\n\n\n\nFirstly you‚Äôll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\n\n\n\n\nTo begin, we‚Äôll run a basic malariasimulation model simulation. This initial run will be generic ‚Äî meaning it‚Äôs not yet customised to represent a specific region, population or transmission setting. We‚Äôll also skip any interventions for now, so we‚Äôre simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1‚Ä¶\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031344, 0.031282, 0.031282, 0.031282‚Ä¶\n$ EIR_gamb              &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.00‚Ä¶\n$ FOIM_gamb             &lt;dbl&gt; 0.008341207, 0.008341207, 0.008341207, 0.0083412‚Ä¶\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,‚Ä¶\n$ n_bitten              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ S_count               &lt;dbl&gt; 42, 43, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, ‚Ä¶\n$ A_count               &lt;dbl&gt; 44, 44, 44, 44, 44, 44, 43, 43, 43, 42, 41, 41, ‚Ä¶\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ U_count               &lt;dbl&gt; 13, 12, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, ‚Ä¶\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ ica_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ id_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ ib_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ iva_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000‚Ä¶\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ‚Ä¶\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ‚Ä¶\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, ‚Ä¶\n$ n_age_730_3650        &lt;dbl&gt; 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, ‚Ä¶\n$ E_gamb_count          &lt;dbl&gt; 39150.44, 39150.44, 39150.44, 39134.20, 39127.53‚Ä¶\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.318, 1139.318, 1139.271, 1139.251‚Ä¶\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7520, 169.7520, 169.7503, 169.7466‚Ä¶\n$ Sm_gamb_count         &lt;dbl&gt; 992.2177, 985.4543, 979.5766, 974.4677, 970.0251‚Ä¶\n$ Pm_gamb_count         &lt;dbl&gt; 7.782346, 14.545684, 20.423442, 25.531575, 29.97‚Ä¶\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000‚Ä¶\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0000, 1000.0000, 999.9992, 999.9‚Ä¶\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what‚Äôs going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Baseline\")\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, ‚Ä¶\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ‚Ä¶\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,‚Ä¶\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.3513514, 0.3513514, 0.3513514, 0.3513514, 0.35135‚Ä¶\n$ run                &lt;chr&gt; \"Baseline\", \"Baseline\", \"Baseline\", \"Baseline\", \"Ba‚Ä¶\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the ‚ÄúProportion of a specified population with malaria infection at one time‚Äù. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = c(\"#31035f\", \"orange\", \"blue\", \"green\"), name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the ‚Äúnumber of infective bites received per person in a given unit of time‚Äù, in this case per year. Let‚Äôs see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"Modified EIR\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet‚Äôs revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the ‚Äúadministration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals‚Äù. They aren‚Äôt used that frequently in practice, but they‚Äôre a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nCongratulations üéâ, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we‚Äôve seen, the impact of our MDA doesn‚Äôt last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let‚Äôs specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\n# Modify the parameter list to add 2 bed net mass distributions\n## Distributions will be at the start of year 2 and 5\n## Each distribution will provide new nets to 80% of the population\n## Individuals will retain their bed net for, on average, 3 years\n## dn0, rn, rnm and gamman determine how the net kill and repels a mosquito species\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),\n  retention = 3 * 365,\n  dn0 = matrix(c(0.533, 0.533)),\n  rn = matrix(c(0.56, 0.56)),\n  rnm = matrix(c(0.24, 0.24)),\n  gamman = c(2.64 * 365, 2.64 * 365)\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(run = \"MDA + Bednets\")\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you‚Äôve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial1.html#part-2---context-matters",
    "href": "tutorial1.html#part-2---context-matters",
    "title": "malariaverse",
    "section": "Part 2 - Context Matters ü¶üüåß!",
    "text": "Part 2 - Context Matters ü¶üüåß!\nIn the next part of this tutorial, (part 2)[URL], we‚Äôll be considering other important factors in addition to interventions that can impact malaria transmission. We‚Äôll be learning how to capture differences in seasonality, mosquitoes, human demography and more!"
  }
]