[
  {
    "objectID": "tutorial3.html",
    "href": "tutorial3.html",
    "title": "malariaverse",
    "section": "",
    "text": "In this section, we’ll focus on tailoring the inputs needed to run malariasimulation for a specific geography or context. We’ll discuss how the site package and its associated country site files can provide a systematic starting point for context-specific malaria modelling runs. By the end of this section, you’ll be able to:\n\nUnderstand how country site files collate essential data for all malaria-endemic countries.\nIdentify the data inputs required for malaria simulations and where they come from.\nUse the site package to convert country information into malariasimulation parameters.\nRun a model for a single site\nUnderstand the limitations of using global datasets."
  },
  {
    "objectID": "tutorial3.html#part-3---tailoring-model-inputs-to-local-contexts",
    "href": "tutorial3.html#part-3---tailoring-model-inputs-to-local-contexts",
    "title": "malariaverse",
    "section": "",
    "text": "In this section, we’ll focus on tailoring the inputs needed to run malariasimulation for a specific geography or context. We’ll discuss how the site package and its associated country site files can provide a systematic starting point for context-specific malaria modelling runs. By the end of this section, you’ll be able to:\n\nUnderstand how country site files collate essential data for all malaria-endemic countries.\nIdentify the data inputs required for malaria simulations and where they come from.\nUse the site package to convert country information into malariasimulation parameters.\nRun a model for a single site\nUnderstand the limitations of using global datasets."
  },
  {
    "objectID": "tutorial3.html#systematically-collating-data-into-country-site-files",
    "href": "tutorial3.html#systematically-collating-data-into-country-site-files",
    "title": "malariaverse",
    "section": "Systematically Collating Data into Country Site Files",
    "text": "Systematically Collating Data into Country Site Files\nRunning malariasimulation for a specific context requires diverse data inputs, including historical interventions, seasonality, population demography, and mosquito population characteristics. Collecting this information systematically across all malaria-endemic countries is no small task. To address this, the country site files consolidate these inputs for each country using globally available datasets.\nThe site files aim to provide a comprehensive overview of relevant data for each malaria-endemic country. This includes ecological, demographic, and intervention-specific information, which serves as a starting point for simulations. But please note:\n⚠️ It is essential to review these data critically before applying them to your specific context. ⚠️ If using a site file, it is important that you correctly reference each data input - referencing the site package alone isn’t enough!\nTo explore the full range of inputs included in the country site files, see the detailed documentation on the site website. Introducing the site Package\nThe site package provides tools to access and utilise the country site files for malaria modelling.This R package simplifies the process of tailoring your modelling inputs by:\n\nAccessing to Country Site Files\nYou can sign up for access to the site files and download them directly. Detailed instructions on how to do this, along with an example, are available here.\n\n\nConverting Country Information into Simulation Parameters\nOnce downloaded, the site package allows you to convert the collated country-specific data into the input parameters required by malariasimulation. This includes calibrating baseline transmission, seasonal patterns, and intervention histories to the context of your chosen geography.\nLimitations of the Country Site Files\nWhile the site files offer a valuable starting point for malaria modelling, there are some important caveats to keep in mind:\n⚠️ Data Coarseness The site files are based on globally available datasets, and some inputs are only available at the country level. This means that the spatial and temporal resolution of the data may be too coarse for detailed local analyses. If you are using a site file for context-specific modelling, it is highly recommended to review and incorporate any additional local data that may be available to refine and recalibrate the inputs.\n⚠️ Data Source Identification If using site files for research, it is crucial to identify and properly cite the underlying datasets. Each section of the site file includes relevant data sources, which must be reviewed and included in your research citations. Simply citing the site package is not sufficient.\n⚠️ Plasmodium vivax Simulations While site files include fitted EIRs and options to model Plasmodium vivax, it’s important to note that malariasimulation is primarily a model for Plasmodium falciparum. Any outputs for Plasmodium vivax should be treated as crude approximations that do not fully capture the unique biological and control dynamics of this species. Use with caution.\nWith these limitations in mind, let’s proceed to run a single site simulation and see how the site files can be applied in practice.\n\n\nExample: Running a Single Site Simulation\nUsing the site package, we’ll demonstrate how to set up and run a simulation for a single site.\n\nlibrary(site)\nlibrary(malariasimulation)\n\n# Download the latest site file for Nigeria\nnigeria &lt;- fetch_site(\n  iso3c = \"NGA\"\n)\n\n# Pull out data for a single site from the site file.\nsite_filter &lt;- data.frame(\n  name_1 = \"\",\n  urban_rural = \"rural\"\n)\nsite &lt;- subset_site(\n  site = nigeria,\n  site_filter = site_filter\n)\n\n# Convert to malariasimulation parameters\nparameters &lt;- site_parameters(\n  interventions = site$interventions,\n  demography = site$demography,\n  vectors = site$vectors,\n  seasonality = site$seasonality$AAAAA,\n)\n\n# Run the simulation\nsimulation &lt;- run_simulation(\n  timesteps = parameters$timesteps,\n  parameters = parameters\n)\n\n\n\nFuture scenarios\nOften, we would like to model future scenarios. To do this we can modify a version of the site, adding future rows (years) to the interventions data.frame.\nFor a full exploration of designing and specifying future scenarios, please see the documentation for the scene packahe.\n\n\nRecalibration\nThe baseline transmission for each site has been calibrated such that given the observed historical scale-up of interventions we best match prevalence estimates. This is a very important step as the level of baseline transmission is very influential, impacting the malaria burden and how well interventions may be able to control malaria in you simulation.\nThis calibration is contingent on the historical scale up of interventions and other aspects of the site file which determine dynamics in the past. Therefore, any changes made historically will necessitate re-calibrating the baseline. This could be for example, updating the historical scale up of bed nets with improved, site-specific data, or changing the assumptions of which vector species are present at a site.\nFor an in depth explainer and additional functionality to help with re-calibration please see the information in the cali package"
  },
  {
    "objectID": "tutorial1.html",
    "href": "tutorial1.html",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let’s dive right in!\n\n\n\nFirstly you’ll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\npalette &lt;- c(\"#1B9E77\", \"#7570B3\", \"#E7298A\", \"#D95F02\", \"#66A61E\")\n\n\n\n\n\nTo begin, we’ll run a basic malariasimulation model simulation. This initial run will be generic — meaning it’s not yet customised to represent a specific region, population or transmission setting. We’ll also skip any interventions for now, so we’re simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031344, 0.031282, 0.031282, 0.031282…\n$ EIR_gamb              &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.00…\n$ FOIM_gamb             &lt;dbl&gt; 0.008341189, 0.008341189, 0.008341189, 0.0083411…\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,…\n$ S_count               &lt;dbl&gt; 42, 43, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, …\n$ A_count               &lt;dbl&gt; 44, 44, 44, 44, 44, 44, 43, 43, 43, 42, 41, 41, …\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ U_count               &lt;dbl&gt; 13, 12, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, …\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ica_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ib_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ iva_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ id_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, …\n$ n_age_730_3650        &lt;dbl&gt; 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, …\n$ E_gamb_count          &lt;dbl&gt; 39147.67, 39142.56, 39133.52, 39129.46, 39127.77…\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.333, 1139.286, 1139.390, 1139.279…\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7485, 169.7476, 169.7363, 169.7432…\n$ Sm_gamb_count         &lt;dbl&gt; 992.2177, 985.4544, 979.5746, 974.4643, 970.0194…\n$ Pm_gamb_count         &lt;dbl&gt; 7.782329, 14.545652, 20.423391, 25.531484, 29.97…\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0001, 999.9980, 999.9958, 999.99…\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ n_bitten              &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what’s going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Baseline\",\n    run = factor(run, levels = \"Baseline\")\n    )\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,…\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.3513514, 0.3513514, 0.3513514, 0.3513514, 0.35135…\n$ run                &lt;fct&gt; Baseline, Baseline, Baseline, Baseline, Baseline, B…\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the “Proportion of a specified population with malaria infection at one time”. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = palette, name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the “number of infective bites received per person in a given unit of time”, in this case per year. Let’s see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Modified EIR\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\nThe intrinsic or baseline carrying capacity of an area refers to the maximum number of mosquitoes that the environment can naturally support, determined by local ecological factors. This capacity sets the potential level of malaria transmission in a region by shaping the population size of the malaria vector. Areas with higher carrying capacity sustain larger mosquito populations, which can drive higher transmission rates. Understanding this baseline is crucial in malaria modelling, as it underpins the natural transmission dynamics and informs the impact of interventions.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet’s revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the “administration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals”. They aren’t used that frequently in practice, but they’re a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"MDA\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\", \"MDA\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nCongratulations 🎉, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we’ve seen, the impact of our MDA doesn’t last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let’s specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\n# Modify the parameter list to add 2 bed net mass distributions\n## Distributions will be at the start of year 2 and 5\n## Each distribution will provide new nets to 80% of the population\n## Individuals will retain their bed net for, on average, 3 years\n## dn0, rn, rnm and gamman determine how the net kill and repels a mosquito species\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),\n  retention = 3 * 365,\n  dn0 = matrix(c(0.533, 0.533)),\n  rn = matrix(c(0.56, 0.56)),\n  rnm = matrix(c(0.24, 0.24)),\n  gamman = c(2.64 * 365, 2.64 * 365)\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"MDA + Bednets\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\", \"MDA\", \"MDA + Bednets\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you’ve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial1.html#malariaverse-tutorial-part-1",
    "href": "tutorial1.html#malariaverse-tutorial-part-1",
    "title": "malariaverse",
    "section": "",
    "text": "This step-by-step guide will walk you through using malariasimulation in R to model malaria transmission and interventions and how to use the malariaverse to apply malariasimulation to a specific context. Let’s dive right in!\n\n\n\nFirstly you’ll need to get up and running with R and install the packages we will use.\n\n# Set the package repositories to use when installing packages\n## mrcide: for packages from the MRC IDE repository\n## CRAN: for general R packages from the official repository\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'\n  )\n)\n\n# Install packages\n## The malaria model:\ninstall.packages(\"malariasimulation\")\n## For malaria model output processing:\ninstall.packages(\"postie\")\n## For output wrangling:\ninstall.packages(\"dplyr\")\n## For plotting:\ninstall.packages(\"ggplot2\")\n\n\n# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\npalette &lt;- c(\"#1B9E77\", \"#7570B3\", \"#E7298A\", \"#D95F02\", \"#66A61E\")\n\n\n\n\n\nTo begin, we’ll run a basic malariasimulation model simulation. This initial run will be generic — meaning it’s not yet customised to represent a specific region, population or transmission setting. We’ll also skip any interventions for now, so we’re simply simulating transmission.\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n# Run a simple malariasimulation for 5 years\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\nWe can take a look at the raw simulation output\n\nglimpse(output)\n\nRows: 1,825\nColumns: 30\n$ timestep              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ n_infections          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ infectivity           &lt;dbl&gt; 0.031406, 0.031344, 0.031282, 0.031282, 0.031282…\n$ EIR_gamb              &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.00…\n$ FOIM_gamb             &lt;dbl&gt; 0.008341189, 0.008341189, 0.008341189, 0.0083411…\n$ mu_gamb               &lt;dbl&gt; 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132,…\n$ S_count               &lt;dbl&gt; 42, 43, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, …\n$ A_count               &lt;dbl&gt; 44, 44, 44, 44, 44, 44, 43, 43, 43, 42, 41, 41, …\n$ D_count               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ U_count               &lt;dbl&gt; 13, 12, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, …\n$ Tr_count              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ica_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ icm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ ib_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ iva_mean              &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ ivm_mean              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ id_mean               &lt;dbl&gt; 0.000000000, 0.000000000, 0.000000000, 0.0000000…\n$ n_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ p_detect_lm_730_3650  &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, …\n$ n_detect_pcr_730_3650 &lt;dbl&gt; 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, …\n$ n_age_730_3650        &lt;dbl&gt; 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, …\n$ E_gamb_count          &lt;dbl&gt; 39147.67, 39142.56, 39133.52, 39129.46, 39127.77…\n$ L_gamb_count          &lt;dbl&gt; 1139.318, 1139.333, 1139.286, 1139.390, 1139.279…\n$ P_gamb_count          &lt;dbl&gt; 169.7520, 169.7485, 169.7476, 169.7363, 169.7432…\n$ Sm_gamb_count         &lt;dbl&gt; 992.2177, 985.4544, 979.5746, 974.4643, 970.0194…\n$ Pm_gamb_count         &lt;dbl&gt; 7.782329, 14.545652, 20.423391, 25.531484, 29.97…\n$ Im_gamb_count         &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.000000…\n$ total_M_gamb          &lt;dbl&gt; 1000.0000, 1000.0001, 999.9980, 999.9958, 999.99…\n$ natural_deaths        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ n_bitten              &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\n\nThere are a lot of outputs for each time step (day)!\n\n\n\nTo get a sense of what’s going on in our simulation, we can use the postie package to process the results, ready for visualisation. This package will help you extract and format key metrics like prevalence, severe cases, and more.\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Baseline\",\n    run = factor(run, levels = \"Baseline\")\n    )\nglimpse(processed_output)\n\nRows: 1,825\nColumns: 7\n$ year               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ month              &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ week               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ day                &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ time               &lt;dbl&gt; 0.000000000, 0.002739726, 0.005479452, 0.008219178,…\n$ lm_prevalence_2_10 &lt;dbl&gt; 0.3513514, 0.3513514, 0.3513514, 0.3513514, 0.35135…\n$ run                &lt;fct&gt; Baseline, Baseline, Baseline, Baseline, Baseline, B…\n\n\nOften, the best way to examine outputs is to plot them. Malaria prevalence indicates the “Proportion of a specified population with malaria infection at one time”. We can plot Plasmodium falciparum parasite prevalence in 2-10 year (PfPR2-10) olds over time.\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = palette, name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\n\n\n\n\nIn our model run above, we can see PfPR2-10 hovering around 0.5. If we want, we can adjust the level of baseline transmission - that is, transmission intensity in the absence of interventions.\nmalariasimulation has lots of helper function to make it easier to modify the parameter list. One of these, set_equilibrium(), allows us to adjust the baseline Entomological Inoculation Rate (EIR). The EIR is the “number of infective bites received per person in a given unit of time”, in this case per year. Let’s see what impact chnaging the EIR in our model has\n\n# Update the parameters with a new EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 2)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Modified EIR\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nOur Baseline run used the default EIR of 10. For our modified run, we can see the impact of lowering the EIR to 2 - PfPR2-10 has fallen from around 50% to 20%.\nThe intrinsic or baseline carrying capacity of an area refers to the maximum number of mosquitoes that the environment can naturally support, determined by local ecological factors. This capacity sets the potential level of malaria transmission in a region by shaping the population size of the malaria vector. Areas with higher carrying capacity sustain larger mosquito populations, which can drive higher transmission rates. Understanding this baseline is crucial in malaria modelling, as it underpins the natural transmission dynamics and informs the impact of interventions.\n\n\n\n\n\nAfter learning how to perform foundational model runs, the next step is adding interventions. Fortunately, malariasimulation has lots of helper functions to facilitate adding different interventions into our simulation. These functions help you to modify the parameter list to include your interventin of choice.\nLet’s revisit our initial model run, and add in a single mass drug administration (MDA). An MDA is the “administration of antimalarial treatment to all age groups of a defined population or every person living in a defined geographical area (except those for whom the medicine is contraindicated) at approximately the same time and often at repeated intervals”. They aren’t used that frequently in practice, but they’re a good intervention to play with in the model as they have a big instant impact and are simple to specify. The helper functions we will use in the code below to implement and MDA is set_mda() and to specify drugs in the simulation [set_drugs()][https://mrc-ide.github.io/malariasimulation/reference/set_drugs.html].\n\n# Get the default parameters\nparameters &lt;- get_parameters()\n\n# Specify the drug options we can use in the simulation.\n## Here we are adding in default parameters for a commonly used drug: Artemether and Lumefantrine (AL).\nparameters &lt;- set_drugs(\n  parameters = parameters,\n  drugs = list(AL_params)\n)\n\n# Specify one round of MDA\n## Drug 1 - indicates we use the first (and only) drug defined in the list above\n## We implement the MDA in the 3rd year (on day 365 * 3)\n## 90% of the target population will receive AL\n## The target population in those aged 6 months - 100 years\nparameters &lt;- set_mda(\n  parameters = parameters,\n  drug = 1,\n  timesteps = 365 * 3,\n  coverages = 0.99,\n  min_ages = 0,\n  max_ages = 36500\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"MDA\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\", \"MDA\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nCongratulations 🎉, you have successfully implemented a round of MDA, and we can see the impact on PfPR2-10. There is a large drop in PfPR2-10 as infections are cleared following administration of AL to a large proportion of the population. However, we can also see with only 1 round of MDA that malaria prevalence returns back to previous levels very quickly.\n\n\n\nAs we’ve seen, the impact of our MDA doesn’t last long. We might want to add additional interventions that help to control malaria transmission over a longer period. One of the most widely used and successful interventions against malaria to date are insecticide treated bed nets (ITNs).\nWe can add ITNs to MDA in our simulation by using the helper function set_bednets(), to further modify our input parameter list. ITNs are often given out in mass distributions that occur every 3 years. We can replicate this style of distribution - let’s specify a mass distribution at the start of years 2 and 5.The set_bednets() function has a number of arguments you must supply, but remember, you can always call ?set_bednets() for help and information on how to use the function correctly. Adding the ? before the function will show you help for any of the malariasimulation functions.\n\n# Modify the parameter list to add 2 bed net mass distributions\n## Distributions will be at the start of year 2 and 5\n## Each distribution will provide new nets to 80% of the population\n## Individuals will retain their bed net for, on average, 3 years\n## dn0, rn, rnm and gamman determine how the net kill and repels a mosquito species\nparameters &lt;- set_bednets(\n  parameters,\n  timesteps =  c(1, 4) * 365 + 1,\n  coverages = c(0.8, 0.8),\n  retention = 3 * 365,\n  dn0 = matrix(c(0.533, 0.533)),\n  rn = matrix(c(0.56, 0.56)),\n  rnm = matrix(c(0.24, 0.24)),\n  gamman = c(2.64 * 365, 2.64 * 365)\n)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run the model\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n)\n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"MDA + Bednets\",\n    run = factor(run, levels = c(\"Baseline\", \"Modified EIR\", \"MDA\", \"MDA + Bednets\"))\n    )\n\n# Add the output from our latest model run to the plot\nprev_plot &lt;- prev_plot + \n  geom_line(\n    data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run)\n  )\nprev_plot\n\n\n\n\n\n\n\n\nExcellent, we can see that in this simulation bed nets are doing a really good job of reducing transmission and helping to keep it low. Now that you’ve learnt how to run a simulation and add in multiple interventions you could begin to use the model to help understand and answer many interesting questions:\n\nIntervention impact: How do different interventions, like bed nets or mass drug administration, affect transmission over time? Optimal mixes of interventions: What combination of interventions yields the greatest reduction in malaria burden?\nTiming of interventions: When is the best time to deploy interventions for maximum effectiveness?\nCost-effectiveness: Which interventions provide the greatest impact for the lowest cost in various settings?\nEffect of coverage: How does changing the percentage of the population covered by an intervention alter transmission dynamics?\nLong-term sustainability: What happens when interventions are scaled back or discontinued? Does malaria transmission bounce back?"
  },
  {
    "objectID": "tutorial1.html#part-2---context-matters",
    "href": "tutorial1.html#part-2---context-matters",
    "title": "malariaverse",
    "section": "Part 2 - Context Matters 🦟🌧!",
    "text": "Part 2 - Context Matters 🦟🌧!\nIn the next part of this tutorial, (part 2)[https://mrc-ide.github.io/malariaverse/tutorial2.html], we’ll be considering other important factors in addition to interventions that can impact malaria transmission. We’ll be learning how to capture differences in seasonality, mosquitoes, human demography and more!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "malariaverse",
    "section": "",
    "text": "End-to-end malaria modelling, powered by data and research, serving national and global needs.\n\n\nThe malariaverse is a constellation of R packages to support the use of malariasimulation individual-based malaria transmission model for place specific modelling, for example modelling a specific region or country.\nThe process often involves:\n\nCollecting and processing data that are specific to the place.\nUsing these data to parameterise malariasimulation.\nProcessing raw model outputs.\nOptimisation.\n\nEach package targets a specific challenge of this broader process. Current packages in the malariaverse are shown below. Clicking on the package logo will take you to the package site, where you’ll find much more detailed information about what the package does and how to use it.\n\n\n\n  \n\n\n\n\n\n\n\numbrella - fitting seasonality parameters from rainfall data\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnetz - managing net metrics and distributions\n  \n\n\n\n\n\n\n\n\npeeps - population demography\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite - country and sub-national site information and conversion to malariasimulation parameters\n  \n\n\n\n\n\n\n\n\ncali - calibrating model transmission\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscene - future scenario builder\n  \n\n\n\n\n\n\n\n\npostie - post-processing of malariasimulation outputs\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nom - intervention stratification optimisation with complex budgets\n  \n\n\n\n\n\n\n\n\ntreasure - a repository for costing data"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "malariaverse",
    "section": "",
    "text": "The model\nFor more information about the transmission model please visit the malariasimulation homepage.\nmalariasimulation is built using the individual package.\n\n\nIssues/Bugs\nTo report an issue or a bug, or request a new feature please use the issues tab on the relevant package’s github page.\n\n\nContributions\nWant to contribute? Great! Please either file a PR on the relevant package’s github page or reach out to discuss options."
  },
  {
    "objectID": "onboard.html",
    "href": "onboard.html",
    "title": "malariaverse",
    "section": "",
    "text": "Welcome to our malaria modelling group! We’re excited to have you on board and hope this page helps you get started with the resources, tools, and community that will support your journey.\nThis page is here to help you settle in - diving into our model vignettes and published papers will give you the best foundation. Feel free to explore, and don’t hesitate to reach out with questions, a good place is the malaria group teams channel.\n\n\n\nmalariasimulation: the group’s individual based malaria transmission model\nThe group’s deterministic malaria transmission model\n\n\n\n\n\nReducing Plasmodium falciparum Malaria Transmission in Africa: A Model-Based Evaluation of Intervention Strategies\nEstimates of the changing age-burden of Plasmodium falciparum malaria disease in sub-Saharan Africa\nGradual acquisition of immunity to severe malaria with increasing exposure\nPotential for reduction of burden and local elimination of malaria by reducing Plasmodium falciparum malaria transmission: a mathematical modelling study\nThe US President’s Malaria Initiative, Plasmodium falciparum transmission and mortality: A modelling study\n\n\n\n\n\nModelling the Impact of Artemisinin Combination Therapy and Long-Acting Treatments on Malaria Transmission Intensity\nModelling the impact of vector control interventions on Anopheles gambiae population dynamics\nContrasting benefits of different artemisinin combination therapies as first-line malaria treatments using model-based cost-effectiveness analysis\nVaccine approaches to malaria control and elimination: Insights from mathematical models\nPublic health impact and cost-effectiveness of the RTS,S/AS01 malaria vaccine: a systematic comparison of predictions from four mathematical models\nOptimising the deployment of vector control tools against malaria: a data-informed modelling study\nInferring the epidemiological benefit of indoor vector control interventions against malaria from mosquito data\nThe public health impact and cost-effectiveness of the R21/Matrix-M malaria vaccine: a mathematical modelling study\nModeling resource allocation strategies for insecticide-treated bed nets to achieve malaria eradication\nThe potential of gene drives in malaria vector species to control malaria in African environments\n\n\n\n\n\nModeling Infectious Diseases in Humans and Animals, Keeling and Rohani\nEssential Malariology, Warrell and Gilles\nR for data science, Wickham and Grolemund\nAdvanced R, Wickham\nR packages, Wickham\nA Student’s Guide to Bayesian Statistics, Ben Lambert.\n\nIn the group and want to suggest additional resources? Please raise a PR!"
  },
  {
    "objectID": "onboard.html#welcome",
    "href": "onboard.html#welcome",
    "title": "malariaverse",
    "section": "",
    "text": "Welcome to our malaria modelling group! We’re excited to have you on board and hope this page helps you get started with the resources, tools, and community that will support your journey.\nThis page is here to help you settle in - diving into our model vignettes and published papers will give you the best foundation. Feel free to explore, and don’t hesitate to reach out with questions, a good place is the malaria group teams channel.\n\n\n\nmalariasimulation: the group’s individual based malaria transmission model\nThe group’s deterministic malaria transmission model\n\n\n\n\n\nReducing Plasmodium falciparum Malaria Transmission in Africa: A Model-Based Evaluation of Intervention Strategies\nEstimates of the changing age-burden of Plasmodium falciparum malaria disease in sub-Saharan Africa\nGradual acquisition of immunity to severe malaria with increasing exposure\nPotential for reduction of burden and local elimination of malaria by reducing Plasmodium falciparum malaria transmission: a mathematical modelling study\nThe US President’s Malaria Initiative, Plasmodium falciparum transmission and mortality: A modelling study\n\n\n\n\n\nModelling the Impact of Artemisinin Combination Therapy and Long-Acting Treatments on Malaria Transmission Intensity\nModelling the impact of vector control interventions on Anopheles gambiae population dynamics\nContrasting benefits of different artemisinin combination therapies as first-line malaria treatments using model-based cost-effectiveness analysis\nVaccine approaches to malaria control and elimination: Insights from mathematical models\nPublic health impact and cost-effectiveness of the RTS,S/AS01 malaria vaccine: a systematic comparison of predictions from four mathematical models\nOptimising the deployment of vector control tools against malaria: a data-informed modelling study\nInferring the epidemiological benefit of indoor vector control interventions against malaria from mosquito data\nThe public health impact and cost-effectiveness of the R21/Matrix-M malaria vaccine: a mathematical modelling study\nModeling resource allocation strategies for insecticide-treated bed nets to achieve malaria eradication\nThe potential of gene drives in malaria vector species to control malaria in African environments\n\n\n\n\n\nModeling Infectious Diseases in Humans and Animals, Keeling and Rohani\nEssential Malariology, Warrell and Gilles\nR for data science, Wickham and Grolemund\nAdvanced R, Wickham\nR packages, Wickham\nA Student’s Guide to Bayesian Statistics, Ben Lambert.\n\nIn the group and want to suggest additional resources? Please raise a PR!"
  },
  {
    "objectID": "tutorial2.html",
    "href": "tutorial2.html",
    "title": "malariaverse",
    "section": "",
    "text": "# Load packages\nlibrary(\"malariasimulation\")\nlibrary(\"postie\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\npalette &lt;- c(\"#1B9E77\", \"#7570B3\", \"#E7298A\", \"#D95F02\", \"#66A61E\")"
  },
  {
    "objectID": "tutorial2.html#malariaverse-tutorial-part-2",
    "href": "tutorial2.html#malariaverse-tutorial-part-2",
    "title": "malariaverse",
    "section": "Malariaverse Tutorial: Part 2",
    "text": "Malariaverse Tutorial: Part 2\nIn part 2 we will explore how to capture other important elements that influence malaria transmission besides the baseline transmission and interventions.\nLet’s go!"
  },
  {
    "objectID": "tutorial2.html#what-infleunces-malaria-transmission",
    "href": "tutorial2.html#what-infleunces-malaria-transmission",
    "title": "malariaverse",
    "section": "What infleunces malaria transmission",
    "text": "What infleunces malaria transmission\nBefore we dive straight into malariasimulation code, it’s helpful for us to consider what other aspects of the environment, human population or mosquito population might be important to capture in our modelling.\n\n🌧 The environment\nThe key way in which the environment impacts transmission in malariasimulation is via rainfall, which drives the availability of mosquito breeding site and there for the number of mosquitoes that can transmit malaria.\n\n\nThe human population\nWe can consider two aspects of the human population as important in different ways\n1. The modelled population size: We rarely use actual population sizes when modelling malaria in a specific region or country as it would make the model run too slowly! Instead we aim to set the modelled population size high enough such that we minimise very influential stochastic behaviour (e.g. elimination of malaria by chance), whilst keeping model run-time reasonable. There is no single “correct” model population size and often some testing with different population sizes in the most helpful approach. Some elements you want to consider might be: * The level of transmission. At low transmission stochasticity might be more influential and you may therefore want to increase you modelled population size. * The research question. Do you want to capture the impact of stochastic effects with smaller modelled population sizes, or minimise them? * The study population. Remember, if your population of interest is a subset of the total population you may want to increase the modelled poplation size so that the trends in the target population are clear.\n2. The population demography: We know that there are strong age-related patterns in malaria incidence, severe disease and death. Therefore it is important to accurately capture the age-structure of your target population. We want to ensure the modelled population has the right proportion of infants, children and adults.\n\n\n🦟 The mosquito population:\nThe mosquito population is, not surprisingly, very impactful on modelled malaria transmission. We should not only think about how many mosquitoes, but also what species of mosquito. Different species may behave very differently, meaning that their ability to transmit malaria, or our ability to control them could also look very different from place to place."
  },
  {
    "objectID": "tutorial2.html#capturing-these-influences-in-malariasimulation",
    "href": "tutorial2.html#capturing-these-influences-in-malariasimulation",
    "title": "malariaverse",
    "section": "Capturing these influences in malariasimulation",
    "text": "Capturing these influences in malariasimulation\n\nModelling seasonality in rainfall\nWe can model a setting where malaria transmission is seasonal, varying throughout the year. The easiest way of doing this is by providing some “seasonality parameters”, these have been fitted to rainfall data to capture how rainfall varies across the year\n\nparameters &lt;- get_parameters()\n\n# Set up for model seasonality\nparameters$model_seasonality &lt;- TRUE\n# Define the seasonality parameters: g0, g and h\nparameters$g0 &lt;- 0\nparameters$g &lt;- c(1, 0, 0)\nparameters$h &lt;- c(0, 0, 0)\n\n# Set the baseline EIR\nparameters &lt;- parameters |&gt;\n  set_equilibrium(init_EIR = 10)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Seasonal\",\n    run = factor(run, levels = c(\"Seasonal\"))\n    )\n\nprev_plot &lt;- ggplot(\n  data = processed_output,\n  aes(x = time, y = lm_prevalence_2_10, colour = run)\n) +\n  geom_line() +\n  scale_colour_manual(\n    values = palette, name = \"Run\"\n  ) +\n  xlab(\"Time (years)\") +\n  ylab(expression(italic(Pf) * Pr[2-10])) +\n  ylim(0, 1) +\n  theme_bw()\nprev_plot\n\n\n\n\n\n\n\n\nTo find out more about how we estimate the seasonality parameters, have a look at the documentation for the umbrella R package.\nWe can also set up much more specific seasonal profiles that vary between years and mosquito species. For more information on this, check out the carrying capacity vignette.\n\n\nChanging the human population size\nWe can change the modelled human population size with the human_population parameter. If we increase the human population to 5000, we can see the impact on our prevalence plot - there is much less stochastic noise in the outcome.\nNote we need to re-set the init_EIR using the set_equilibrium() function after changing the human population, as the the human population infleucnes the equilibrium.\n\nparameters$human_population &lt;- 5000\nparameters &lt;- parameters  |&gt;\n  set_equilibrium(init_EIR = 10)\n\n# Set a seed for reproducible stochastic outputs\nset.seed(1234)\n\n# Run a new simulation\noutput &lt;- run_simulation(\n  timesteps = 365 * 5,\n  parameters = parameters\n) \n\n# Extract formatted prevalence from the raw output and add a run name\nprocessed_output &lt;- get_prevalence(\n  x = output,\n  baseline_year = 0\n) |&gt;\n  mutate(\n    run = \"Seasonal - large population\",\n    run = factor(run, levels = c(\"Seasonal\", \"Seasonal - large population\"))\n    )\n\nprev_plot &lt;- prev_plot +\n  geom_line(data = processed_output, aes(x = time, y = lm_prevalence_2_10, col = run))\nprev_plot\n\n\n\n\n\n\n\n\n\n\nChanging demography\nThe default demography in malaria simulation assumes a constant death rate and is parametrised using the average_age parameter. This leads to a exponentially distributed age-pyramid for the modelled population. More complex demographies, including those where death rates by age are not constant and, where the demography changes over time can be specified using the set_demography() functionality in malariasimulation.\n\n\nChanging the mosquito population\nThe mosquito species present in the model run, and their behaviour are critically important to the resulting model dynamics and intevention impact. We need to capture these differnces as best we can as we know that in different places the number, species and behaviour of mosquitoes will differ.\nIn malariasimulation we can make use of the powerful set_species() function to modify the number, type and behaviour of mosquito species in the model. Full details can be seen on the mosquito species vignette."
  },
  {
    "objectID": "tutorial2.html#part-3---tailoring-model-inputs-to-local-contexts",
    "href": "tutorial2.html#part-3---tailoring-model-inputs-to-local-contexts",
    "title": "malariaverse",
    "section": "Part 3 - tailoring model inputs to local contexts",
    "text": "Part 3 - tailoring model inputs to local contexts\nWe now understand many of the important inputs that need to be tailored to run malariasimulation for a specific geography or context. These include:\n\nBaseline transmission\nHistorical interventions\nSeasonality\nPopulation demography\nMosqito population characteristics\n\nThat’s quite a lot of information to gather! If you already have access to this data—great!\nIf not, in part 3, we will talk about the site package and explore how the country site-files it includes can serve as a useful starting point for context-specific modelling runs."
  }
]